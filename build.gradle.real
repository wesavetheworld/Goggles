apply plugin: 'com.android.application'


dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':ZUtilsExt')

}


//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = (int)date.getTime()
    return formattedDate
}

def time = getDate()



android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.zhao.withu.googles"

        minSdkVersion 9
        targetSdkVersion 25
        versionCode time
        versionName "2.0.0"

    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    //签名
    signingConfigs {
        release {
            storeFile file("Zhao")
            storePassword "Zhao412829"
            keyAlias "zhao"
            keyPassword "Zhao412829"
        }

        debug {
            storeFile file("Zhao")
            storePassword "Zhao412829"
            keyAlias "zhao"
            keyPassword "Zhao412829"
        }
    }


    buildTypes {

        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-project.txt'
//            runProguard true
            minifyEnabled true


            //显示log
            buildConfigField "boolean", "LOG_OUTPUT", "false"

            //zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
        }

        debug {
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-debug.txt'), 'proguard-debug.txt'
//            runProguard false
            minifyEnabled false

            //显示log
            buildConfigField "boolean", "LOG_OUTPUT", "false"

            //zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false

        }

    }
}
